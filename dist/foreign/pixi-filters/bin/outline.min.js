/*!
 * pixi-filters - v1.0.8
 * Compiled Mon, 24 Jul 2017 17:05:06 UTC
 *
 * pixi-filters is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */
!function(r,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports):"function"==typeof define&&define.amd?define(["exports"],e):e(r.__pixiFilters={})}(this,function(r){"use strict";if(void 0===PIXI.Filter)throw"PixiJS is required";var e="attribute vec2 aVertexPosition;\r\nattribute vec2 aTextureCoord;\r\n\r\nuniform mat3 projectionMatrix;\r\nvarying vec2 vTextureCoord;\r\n\r\nvoid main(void){\r\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\r\n    vTextureCoord = aTextureCoord;\r\n}\r\n",o="varying vec2 vTextureCoord;\r\nuniform sampler2D uSampler;\r\n\r\nuniform float thickness;\r\nuniform vec4 outlineColor;\r\nuniform vec4 filterArea;\r\nuniform vec4 filterClamp;\r\nvec2 px = vec2(1.0 / filterArea.x, 1.0 / filterArea.y);\r\n\r\nvoid main(void) {\r\n    const float PI = 3.14159265358979323846264;\r\n    vec4 ownColor = texture2D(uSampler, vTextureCoord);\r\n    vec4 curColor;\r\n    float maxAlpha = 0.;\r\n    vec2 displaced;\r\n    for (float angle = 0.; angle < PI * 2.; angle += %THICKNESS% ) {\r\n        displaced.x = vTextureCoord.x + thickness * px.x * cos(angle);\r\n        displaced.y = vTextureCoord.y + thickness * px.y * sin(angle);\r\n        curColor = texture2D(uSampler, clamp(displaced, filterClamp.xy, filterClamp.zw));\r\n        maxAlpha = max(maxAlpha, curColor.a);\r\n    }\r\n    float resultAlpha = max(maxAlpha, ownColor.a);\r\n    gl_FragColor = vec4((ownColor.rgb + outlineColor.rgb * (1. - ownColor.a)) * resultAlpha, resultAlpha);\r\n}\r\n",t=function(r){function t(t,n){void 0===t&&(t=1),void 0===n&&(n=0),r.call(this,e,o.replace(/%THICKNESS%/gi,(1/t).toFixed(7))),this.thickness=t,this.uniforms.outlineColor=new Float32Array([0,0,0,1]),this.color=n}r&&(t.__proto__=r),(t.prototype=Object.create(r&&r.prototype)).constructor=t;var n={color:{},thickness:{}};return n.color.get=function(){return PIXI.utils.rgb2hex(this.uniforms.outlineColor)},n.color.set=function(r){PIXI.utils.hex2rgb(r,this.uniforms.outlineColor)},n.thickness.get=function(){return this.uniforms.thickness},n.thickness.set=function(r){this.uniforms.thickness=r},Object.defineProperties(t.prototype,n),t}(PIXI.Filter);r.OutlineFilter=t,Object.defineProperty(r,"__esModule",{value:!0}),Object.assign(PIXI.filters,__pixiFilters)});
//# sourceMappingURL=outline.min.js.map
