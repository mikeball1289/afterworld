/*!
 * pixi-filters - v1.0.8
 * Compiled Mon, 24 Jul 2017 17:05:11 UTC
 *
 * pixi-filters is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */
!function(r,o){"object"==typeof exports&&"undefined"!=typeof module?o(exports):"function"==typeof define&&define.amd?define(["exports"],o):o(r.__pixiFilters={})}(this,function(r){"use strict";if(void 0===PIXI.Filter)throw"PixiJS is required";var o="precision mediump float;\r\n\r\nvarying vec2 vTextureCoord;\r\nuniform sampler2D uSampler;\r\n\r\nuniform float thickness;\r\nuniform vec4 outlineColor;\r\nuniform float pixelWidth;\r\nuniform float pixelHeight;\r\nvec2 px = vec2(pixelWidth, pixelHeight);\r\n\r\nvoid main(void) {\r\n    const float PI = 3.14159265358979323846264;\r\n    vec4 ownColor = texture2D(uSampler, vTextureCoord);\r\n    vec4 curColor;\r\n    float maxAlpha = 0.;\r\n    for (float angle = 0.; angle < PI * 2.; angle +=  + (1 / thickness).toFixed(7) + ) {\r\n        curColor = texture2D(uSampler, vec2(vTextureCoord.x + thickness * px.x * cos(angle), vTextureCoord.y + thickness * px.y * sin(angle)));\r\n        maxAlpha = max(maxAlpha, curColor.a);\r\n    }\r\n    float resultAlpha = max(maxAlpha, ownColor.a);\r\n    gl_FragColor = vec4((ownColor.rgb + outlineColor.rgb * (1. - ownColor.a)) * resultAlpha, resultAlpha);\r\n}\r\n",e="varying vec4 vColor;\r\nvarying vec2 vTextureCoord;\r\nuniform sampler2D u_texture; //diffuse map\r\nuniform sampler2D u_lightmap;   //light map\r\nuniform vec2 resolution; //resolution of screen\r\nuniform vec4 ambientColor; //ambient RGB, alpha channel is intensity\r\nvoid main() {\r\n    vec4 diffuseColor = texture2D(u_texture, vTextureCoord);\r\n    vec2 lighCoord = (gl_FragCoord.xy / resolution.xy);\r\n    vec4 light = texture2D(u_lightmap, vTextureCoord);\r\n    vec3 ambient = ambientColor.rgb * ambientColor.a;\r\n    vec3 intensity = ambient + light.rgb;\r\n    vec3 finalColor = diffuseColor.rgb * intensity;\r\n    gl_FragColor = vColor * vec4(finalColor, diffuseColor.a);\r\n}\r\n",t=function(r){function t(t,n,i){void 0===i&&(i=[1,1]),r.call(this,o,e),this.uniforms.u_lightmap=t,this.uniforms.resolution=new Float32Array(i),this.uniforms.ambientColor=new Float32Array(n)}r&&(t.__proto__=r),(t.prototype=Object.create(r&&r.prototype)).constructor=t;var n={texture:{},color:{},resolution:{}};return n.texture.get=function(){return this.uniforms.u_lightmap},n.texture.set=function(r){this.uniforms.u_lightmap=r},n.color.get=function(){return this.uniforms.ambientColor},n.color.set=function(r){this.uniforms.ambientColor=new Float32Array(r)},n.resolution.get=function(){return this.uniforms.resolution},n.resolution.set=function(r){this.uniforms.resolution=new Float32Array(r)},Object.defineProperties(t.prototype,n),t}(PIXI.Filter);r.SimpleLightmapFilter=t,Object.defineProperty(r,"__esModule",{value:!0}),Object.assign(PIXI.filters,__pixiFilters)});
//# sourceMappingURL=simplelightmap.min.js.map
