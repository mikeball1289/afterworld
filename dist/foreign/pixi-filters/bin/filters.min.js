/*!
 * pixi-filters - v1.0.8
 * Compiled Mon, 24 Jul 2017 17:04:42 UTC
 *
 * pixi-filters is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */
!function(r,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t(r.__pixiFilters={})}(this,function(r){"use strict";if(void 0===PIXI.Filter)throw"PixiJS is required";var t="attribute vec2 aVertexPosition;\r\nattribute vec2 aTextureCoord;\r\n\r\nuniform mat3 projectionMatrix;\r\n\r\nvarying vec2 vTextureCoord;\r\n\r\nvoid main(void)\r\n{\r\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\r\n    vTextureCoord = aTextureCoord;\r\n}",e="varying vec2 vTextureCoord;\r\n\r\nuniform vec4 filterArea;\r\nuniform float pixelSize;\r\nuniform sampler2D uSampler;\r\n\r\nvec2 mapCoord( vec2 coord )\r\n{\r\n    coord *= filterArea.xy;\r\n    coord += filterArea.zw;\r\n\r\n    return coord;\r\n}\r\n\r\nvec2 unmapCoord( vec2 coord )\r\n{\r\n    coord -= filterArea.zw;\r\n    coord /= filterArea.xy;\r\n\r\n    return coord;\r\n}\r\n\r\nvec2 pixelate(vec2 coord, vec2 size)\r\n{\r\n    return floor( coord / size ) * size;\r\n}\r\n\r\nvec2 getMod(vec2 coord, vec2 size)\r\n{\r\n    return mod( coord , size) / size;\r\n}\r\n\r\nfloat character(float n, vec2 p)\r\n{\r\n    p = floor(p*vec2(4.0, -4.0) + 2.5);\r\n    if (clamp(p.x, 0.0, 4.0) == p.x && clamp(p.y, 0.0, 4.0) == p.y)\r\n    {\r\n        if (int(mod(n/exp2(p.x + 5.0*p.y), 2.0)) == 1) return 1.0;\r\n    }\r\n    return 0.0;\r\n}\r\n\r\nvoid main()\r\n{\r\n    vec2 coord = mapCoord(vTextureCoord);\r\n\r\n    // get the rounded color..\r\n    vec2 pixCoord = pixelate(coord, vec2(pixelSize));\r\n    pixCoord = unmapCoord(pixCoord);\r\n\r\n    vec4 color = texture2D(uSampler, pixCoord);\r\n\r\n    // determine the character to use\r\n    float gray = (color.r + color.g + color.b) / 3.0;\r\n\r\n    float n =  65536.0;             // .\r\n    if (gray > 0.2) n = 65600.0;    // :\r\n    if (gray > 0.3) n = 332772.0;   // *\r\n    if (gray > 0.4) n = 15255086.0; // o\r\n    if (gray > 0.5) n = 23385164.0; // &\r\n    if (gray > 0.6) n = 15252014.0; // 8\r\n    if (gray > 0.7) n = 13199452.0; // @\r\n    if (gray > 0.8) n = 11512810.0; // #\r\n\r\n    // get the mod..\r\n    vec2 modd = getMod(coord, vec2(pixelSize));\r\n\r\n    gl_FragColor = color * character( n, vec2(-1.0) + modd * 2.0);\r\n\r\n}",o=function(r){function o(o){void 0===o&&(o=8),r.call(this,t,e),this.size=o}r&&(o.__proto__=r),(o.prototype=Object.create(r&&r.prototype)).constructor=o;var n={size:{}};return n.size.get=function(){return this.uniforms.pixelSize},n.size.set=function(r){this.uniforms.pixelSize=r},Object.defineProperties(o.prototype,n),o}(PIXI.Filter),n=PIXI.filters,i=n.BlurXFilter,l=n.BlurYFilter,a=n.VoidFilter,u=function(r){function t(t){void 0===t&&(t=2),r.call(this),this.blurXFilter=new i,this.blurYFilter=new l,this.blurYFilter.blendMode=PIXI.BLEND_MODES.SCREEN,this.defaultFilter=new a,"number"==typeof t?this.blur=t:t instanceof PIXI.Point&&(this.blurX=t.x,this.blurY=t.y)}r&&(t.__proto__=r),(t.prototype=Object.create(r&&r.prototype)).constructor=t;var e={blur:{},blurX:{},blurY:{}};return t.prototype.apply=function(r,t,e){var o=r.getRenderTarget(!0);this.defaultFilter.apply(r,t,e),this.blurXFilter.apply(r,t,o),this.blurYFilter.apply(r,o,e),r.returnRenderTarget(o)},e.blur.get=function(){return this.blurXFilter.blur},e.blur.set=function(r){this.blurXFilter.blur=this.blurYFilter.blur=r},e.blurX.get=function(){return this.blurXFilter.blur},e.blurX.set=function(r){this.blurXFilter.blur=r},e.blurY.get=function(){return this.blurYFilter.blur},e.blurY.set=function(r){this.blurYFilter.blur=r},Object.defineProperties(t.prototype,e),t}(PIXI.Filter),s="attribute vec2 aVertexPosition;\r\nattribute vec2 aTextureCoord;\r\n\r\nuniform mat3 projectionMatrix;\r\nvarying vec2 vTextureCoord;\r\n\r\nvoid main(void){\r\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\r\n    vTextureCoord = aTextureCoord;\r\n}\r\n",c="uniform float radius;\r\nuniform float strength;\r\nuniform vec2 center;\r\nuniform sampler2D uSampler;\r\nuniform vec4 dimensions;\r\nvarying vec2 vTextureCoord;\r\nvoid main()\r\n{\r\n    vec2 coord = vTextureCoord * dimensions.xy;\r\n    coord -= center;\r\n    float distance = length(coord);\r\n    if (distance < radius) {\r\n        float percent = distance / radius;\r\n        if (strength > 0.0) {\r\n            coord *= mix(1.0, smoothstep(0.0, radius /     distance, percent), strength * 0.75);\r\n        } else {\r\n            coord *= mix(1.0, pow(percent, 1.0 + strength * 0.75) * radius / distance, 1.0 - percent);\r\n        }\r\n    }\r\n    coord += center;\r\n    gl_FragColor = texture2D(uSampler, coord / dimensions.xy);\r\n    vec2 clampedCoord = clamp(coord, vec2(0.0), dimensions.xy);\r\n    if (coord != clampedCoord) {\r\n    gl_FragColor.a *= max(0.0, 1.0 - length(coord - clampedCoord));\r\n    }\r\n}\r\n",f=function(r){function t(t,e,o){r.call(this,s,c),this.center=t||[.5,.5],this.radius=e||100,this.strength=o||1}r&&(t.__proto__=r),(t.prototype=Object.create(r&&r.prototype)).constructor=t;var e={radius:{},strength:{},center:{}};return e.radius.get=function(){return this.uniforms.radius},e.radius.set=function(r){this.uniforms.radius=r},e.strength.get=function(){return this.uniforms.strength},e.strength.set=function(r){this.uniforms.strength=r},e.center.get=function(){return this.uniforms.center},e.center.set=function(r){this.uniforms.center=r},Object.defineProperties(t.prototype,e),t}(PIXI.Filter),d="attribute vec2 aVertexPosition;\r\nattribute vec2 aTextureCoord;\r\n\r\nuniform mat3 projectionMatrix;\r\nvarying vec2 vTextureCoord;\r\n\r\nvoid main(void){\r\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\r\n    vTextureCoord = aTextureCoord;\r\n}\r\n",p="varying vec2 vTextureCoord;\r\nuniform sampler2D texture;\r\nuniform vec3 originalColor;\r\nuniform vec3 newColor;\r\nuniform float epsilon;\r\nvoid main(void) {\r\n    vec4 currentColor = texture2D(texture, vTextureCoord);\r\n    vec3 colorDiff = originalColor - (currentColor.rgb / max(currentColor.a, 0.0000000001));\r\n    float colorDistance = length(colorDiff);\r\n    float doReplace = step(colorDistance, epsilon);\r\n    gl_FragColor = vec4(mix(currentColor.rgb, (newColor + colorDiff) * currentColor.a, doReplace), currentColor.a);\r\n}\r\n",m=function(r){function t(t,e,o){void 0===t&&(t=16711680),void 0===e&&(e=0),void 0===o&&(o=.4),r.call(this,d,p),this.originalColor=t,this.newColor=e,this.epsilon=o}r&&(t.__proto__=r),(t.prototype=Object.create(r&&r.prototype)).constructor=t;var e={originalColor:{},newColor:{},epsilon:{}};return e.originalColor.set=function(r){var t=this.uniforms.originalColor;"number"==typeof r?(PIXI.utils.hex2rgb(r,t),this._originalColor=r):(t[0]=r[0],t[1]=r[1],t[2]=r[2],this._originalColor=PIXI.utils.rgb2hex(t))},e.originalColor.get=function(){return this._originalColor},e.newColor.set=function(r){var t=this.uniforms.newColor;"number"==typeof r?(PIXI.utils.hex2rgb(r,t),this._newColor=r):(t[0]=r[0],t[1]=r[1],t[2]=r[2],this._newColor=PIXI.utils.rgb2hex(t))},e.newColor.get=function(){return this._newColor},e.epsilon.set=function(r){this.uniforms.epsilon=r},e.epsilon.get=function(){return this.uniforms.epsilon},Object.defineProperties(t.prototype,e),t}(PIXI.Filter),v="precision mediump float;\r\n\r\nvarying mediump vec2 vTextureCoord;\r\n\r\nuniform sampler2D uSampler;\r\nuniform vec2 texelSize;\r\nuniform float matrix[9];\r\n\r\nvoid main(void)\r\n{\r\n   vec4 c11 = texture2D(uSampler, vTextureCoord - texelSize); // top left\r\n   vec4 c12 = texture2D(uSampler, vec2(vTextureCoord.x, vTextureCoord.y - texelSize.y)); // top center\r\n   vec4 c13 = texture2D(uSampler, vec2(vTextureCoord.x + texelSize.x, vTextureCoord.y - texelSize.y)); // top right\r\n\r\n   vec4 c21 = texture2D(uSampler, vec2(vTextureCoord.x - texelSize.x, vTextureCoord.y)); // mid left\r\n   vec4 c22 = texture2D(uSampler, vTextureCoord); // mid center\r\n   vec4 c23 = texture2D(uSampler, vec2(vTextureCoord.x + texelSize.x, vTextureCoord.y)); // mid right\r\n\r\n   vec4 c31 = texture2D(uSampler, vec2(vTextureCoord.x - texelSize.x, vTextureCoord.y + texelSize.y)); // bottom left\r\n   vec4 c32 = texture2D(uSampler, vec2(vTextureCoord.x, vTextureCoord.y + texelSize.y)); // bottom center\r\n   vec4 c33 = texture2D(uSampler, vTextureCoord + texelSize); // bottom right\r\n\r\n   gl_FragColor =\r\n       c11 * matrix[0] + c12 * matrix[1] + c13 * matrix[2] +\r\n       c21 * matrix[3] + c22 * matrix[4] + c23 * matrix[5] +\r\n       c31 * matrix[6] + c32 * matrix[7] + c33 * matrix[8];\r\n\r\n   gl_FragColor.a = c22.a;\r\n}\r\n",h=function(r){function e(e,o,n){r.call(this,t,v),this.matrix=e,this.width=o,this.height=n}r&&(e.__proto__=r),(e.prototype=Object.create(r&&r.prototype)).constructor=e;var o={matrix:{},width:{},height:{}};return o.matrix.get=function(){return this.uniforms.matrix},o.matrix.set=function(r){this.uniforms.matrix=new Float32Array(r)},o.width.get=function(){return 1/this.uniforms.texelSize[0]},o.width.set=function(r){this.uniforms.texelSize[0]=1/r},o.height.get=function(){return 1/this.uniforms.texelSize[1]},o.height.set=function(r){this.uniforms.texelSize[1]=1/r},Object.defineProperties(e.prototype,o),e}(PIXI.Filter),g="precision mediump float;\r\n\r\nvarying vec2 vTextureCoord;\r\n\r\nuniform sampler2D uSampler;\r\n\r\nvoid main(void)\r\n{\r\n    float lum = length(texture2D(uSampler, vTextureCoord.xy).rgb);\r\n\r\n    gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);\r\n\r\n    if (lum < 1.00)\r\n    {\r\n        if (mod(gl_FragCoord.x + gl_FragCoord.y, 10.0) == 0.0)\r\n        {\r\n            gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\r\n        }\r\n    }\r\n\r\n    if (lum < 0.75)\r\n    {\r\n        if (mod(gl_FragCoord.x - gl_FragCoord.y, 10.0) == 0.0)\r\n        {\r\n            gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\r\n        }\r\n    }\r\n\r\n    if (lum < 0.50)\r\n    {\r\n        if (mod(gl_FragCoord.x + gl_FragCoord.y - 5.0, 10.0) == 0.0)\r\n        {\r\n            gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\r\n        }\r\n    }\r\n\r\n    if (lum < 0.3)\r\n    {\r\n        if (mod(gl_FragCoord.x - gl_FragCoord.y - 5.0, 10.0) == 0.0)\r\n        {\r\n            gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\r\n        }\r\n    }\r\n}\r\n",x=function(r){function e(){r.call(this,t,g)}return r&&(e.__proto__=r),e.prototype=Object.create(r&&r.prototype),e.prototype.constructor=e,e}(PIXI.Filter),C="precision mediump float;\r\n\r\nvarying vec2 vTextureCoord;\r\nvarying vec4 vColor;\r\n\r\nuniform vec4 filterArea;\r\nuniform sampler2D uSampler;\r\n\r\nuniform float angle;\r\nuniform float scale;\r\n\r\nfloat pattern()\r\n{\r\n   float s = sin(angle), c = cos(angle);\r\n   vec2 tex = vTextureCoord * filterArea.xy;\r\n   vec2 point = vec2(\r\n       c * tex.x - s * tex.y,\r\n       s * tex.x + c * tex.y\r\n   ) * scale;\r\n   return (sin(point.x) * sin(point.y)) * 4.0;\r\n}\r\n\r\nvoid main()\r\n{\r\n   vec4 color = texture2D(uSampler, vTextureCoord);\r\n   float average = (color.r + color.g + color.b) / 3.0;\r\n   gl_FragColor = vec4(vec3(average * 10.0 - 5.0 + pattern()), color.a);\r\n}\r\n",y=function(r){function e(e,o){void 0===e&&(e=1),void 0===o&&(o=5),r.call(this,t,C),this.scale=e,this.angle=o}r&&(e.__proto__=r),(e.prototype=Object.create(r&&r.prototype)).constructor=e;var o={scale:{},angle:{}};return o.scale.get=function(){return this.uniforms.scale},o.scale.set=function(r){this.uniforms.scale=r},o.angle.get=function(){return this.uniforms.angle},o.angle.set=function(r){this.uniforms.angle=r},Object.defineProperties(e.prototype,o),e}(PIXI.Filter),b="varying vec2 vTextureCoord;\r\nuniform sampler2D uSampler;\r\nuniform float alpha;\r\nuniform vec3 color;\r\nvoid main(void){\r\n    vec4 sample = texture2D(uSampler, vTextureCoord);\r\n    gl_FragColor = vec4(color, sample.a > 0.0 ? alpha : 0.0);\r\n}",_=function(r){function e(e,o,n,i,l){void 0===e&&(e=45),void 0===o&&(o=5),void 0===n&&(n=2),void 0===i&&(i=0),void 0===l&&(l=.5),r.call(this),this.tintFilter=new PIXI.Filter(t,b),this.blurFilter=new PIXI.filters.BlurFilter,this.blurFilter.blur=n,this.rotation=e,this.padding=o,this.distance=o,this.alpha=l,this.color=i}r&&(e.__proto__=r),(e.prototype=Object.create(r&&r.prototype)).constructor=e;var o={distance:{},rotation:{},blur:{},alpha:{},color:{}};return e.prototype.apply=function(t,e,o){var n=t.getRenderTarget();n.clear(),o.root||o.clear(),n.transform=new PIXI.Matrix,n.transform.translate(this.distance*Math.cos(this.angle),this.distance*Math.sin(this.angle)),this.tintFilter.apply(t,e,n),this.blurFilter.apply(t,n,o),r.prototype.apply.call(this,t,e,o),n.transform=null,t.returnRenderTarget(n)},e.prototype.updatePadding=function(){this.padding=Math.max(this.distance,10)*this.blur*2},o.distance.get=function(){return this._distance},o.distance.set=function(r){this._distance=r,this.updatePadding()},o.rotation.get=function(){return this.angle/PIXI.DEG_TO_RAD},o.rotation.set=function(r){this.angle=r*PIXI.DEG_TO_RAD},o.blur.get=function(){return this.blurFilter.blur},o.blur.set=function(r){this.blurFilter.blur=r,this.updatePadding()},o.alpha.get=function(){return this.tintFilter.uniforms.alpha},o.alpha.set=function(r){this.tintFilter.uniforms.alpha=r},o.color.get=function(){return PIXI.utils.rgb2hex(this.tintFilter.uniforms.color)},o.color.set=function(r){PIXI.utils.hex2rgb(r,this.tintFilter.uniforms.color)},Object.defineProperties(e.prototype,o),e}(PIXI.Filter),F="precision mediump float;\r\n\r\nvarying vec2 vTextureCoord;\r\n\r\nuniform sampler2D uSampler;\r\nuniform float strength;\r\nuniform vec4 filterArea;\r\n\r\n\r\nvoid main(void)\r\n{\r\n\tvec2 onePixel = vec2(1.0 / filterArea);\r\n\r\n\tvec4 color;\r\n\r\n\tcolor.rgb = vec3(0.5);\r\n\r\n\tcolor -= texture2D(uSampler, vTextureCoord - onePixel) * strength;\r\n\tcolor += texture2D(uSampler, vTextureCoord + onePixel) * strength;\r\n\r\n\tcolor.rgb = vec3((color.r + color.g + color.b) / 3.0);\r\n\r\n\tfloat alpha = texture2D(uSampler, vTextureCoord).a;\r\n\r\n\tgl_FragColor = vec4(color.rgb * alpha, alpha);\r\n}\r\n",S=function(r){function e(e){void 0===e&&(e=5),r.call(this,t,F),this.strength=e}r&&(e.__proto__=r),(e.prototype=Object.create(r&&r.prototype)).constructor=e;var o={strength:{}};return o.strength.get=function(){return this.uniforms.strength},o.strength.set=function(r){this.uniforms.strength=r},Object.defineProperties(e.prototype,o),e}(PIXI.Filter),T="attribute vec2 aVertexPosition;\r\nattribute vec2 aTextureCoord;\r\n\r\nuniform mat3 projectionMatrix;\r\nvarying vec2 vTextureCoord;\r\n\r\nvoid main(void){\r\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\r\n    vTextureCoord = aTextureCoord;\r\n}\r\n",I="varying vec2 vTextureCoord;\r\nvarying vec4 vColor;\r\n\r\nuniform sampler2D uSampler;\r\n\r\nuniform float distance;\r\nuniform float outerStrength;\r\nuniform float innerStrength;\r\nuniform vec4 glowColor;\r\nuniform vec4 filterArea;\r\nuniform vec4 filterClamp;\r\nvec2 px = vec2(1.0 / filterArea.x, 1.0 / filterArea.y);\r\n\r\nvoid main(void) {\r\n    const float PI = 3.14159265358979323846264;\r\n    vec4 ownColor = texture2D(uSampler, vTextureCoord);\r\n    vec4 curColor;\r\n    float totalAlpha = 0.0;\r\n    float maxTotalAlpha = 0.0;\r\n    float cosAngle;\r\n    float sinAngle;\r\n    vec2 displaced;\r\n    for (float angle = 0.0; angle <= PI * 2.0; angle += %QUALITY_DIST%) {\r\n       cosAngle = cos(angle);\r\n       sinAngle = sin(angle);\r\n       for (float curDistance = 1.0; curDistance <= %DIST%; curDistance++) {\r\n           displaced.x = vTextureCoord.x + cosAngle * curDistance * px.x;\r\n           displaced.y = vTextureCoord.y + sinAngle * curDistance * px.y;\r\n           curColor = texture2D(uSampler, clamp(displaced, filterClamp.xy, filterClamp.zw));\r\n           totalAlpha += (distance - curDistance) * curColor.a;\r\n           maxTotalAlpha += (distance - curDistance);\r\n       }\r\n    }\r\n    maxTotalAlpha = max(maxTotalAlpha, 0.0001);\r\n\r\n    ownColor.a = max(ownColor.a, 0.0001);\r\n    ownColor.rgb = ownColor.rgb / ownColor.a;\r\n    float outerGlowAlpha = (totalAlpha / maxTotalAlpha)  * outerStrength * (1. - ownColor.a);\r\n    float innerGlowAlpha = ((maxTotalAlpha - totalAlpha) / maxTotalAlpha) * innerStrength * ownColor.a;\r\n    float resultAlpha = (ownColor.a + outerGlowAlpha);\r\n    gl_FragColor = vec4(mix(mix(ownColor.rgb, glowColor.rgb, innerGlowAlpha / ownColor.a), glowColor.rgb, outerGlowAlpha / resultAlpha) * resultAlpha, resultAlpha);\r\n}\r\n",P=function(r){function t(t,e,o,n,i){void 0===t&&(t=10),void 0===e&&(e=4),void 0===o&&(o=0),void 0===n&&(n=16777215),void 0===i&&(i=.1),r.call(this,T,I.replace(/%QUALITY_DIST%/gi,""+(1/i/t).toFixed(7)).replace(/%DIST%/gi,""+t.toFixed(7))),this.uniforms.glowColor=new Float32Array([0,0,0,1]),this.distance=t,this.color=n,this.outerStrength=e,this.innerStrength=o}r&&(t.__proto__=r),(t.prototype=Object.create(r&&r.prototype)).constructor=t;var e={color:{},distance:{},outerStrength:{},innerStrength:{}};return e.color.get=function(){return PIXI.utils.rgb2hex(this.uniforms.glowColor)},e.color.set=function(r){PIXI.utils.hex2rgb(r,this.uniforms.glowColor)},e.distance.get=function(){return this.uniforms.distance},e.distance.set=function(r){this.uniforms.distance=r},e.outerStrength.get=function(){return this.uniforms.outerStrength},e.outerStrength.set=function(r){this.uniforms.outerStrength=r},e.innerStrength.get=function(){return this.uniforms.innerStrength},e.innerStrength.set=function(r){this.uniforms.innerStrength=r},Object.defineProperties(t.prototype,e),t}(PIXI.Filter),w="attribute vec2 aVertexPosition;\r\nattribute vec2 aTextureCoord;\r\n\r\nuniform mat3 projectionMatrix;\r\nvarying vec2 vTextureCoord;\r\n\r\nvoid main(void){\r\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\r\n    vTextureCoord = aTextureCoord;\r\n}\r\n",D="varying vec2 vTextureCoord;\r\nuniform sampler2D uSampler;\r\n\r\nuniform float thickness;\r\nuniform vec4 outlineColor;\r\nuniform vec4 filterArea;\r\nuniform vec4 filterClamp;\r\nvec2 px = vec2(1.0 / filterArea.x, 1.0 / filterArea.y);\r\n\r\nvoid main(void) {\r\n    const float PI = 3.14159265358979323846264;\r\n    vec4 ownColor = texture2D(uSampler, vTextureCoord);\r\n    vec4 curColor;\r\n    float maxAlpha = 0.;\r\n    vec2 displaced;\r\n    for (float angle = 0.; angle < PI * 2.; angle += %THICKNESS% ) {\r\n        displaced.x = vTextureCoord.x + thickness * px.x * cos(angle);\r\n        displaced.y = vTextureCoord.y + thickness * px.y * sin(angle);\r\n        curColor = texture2D(uSampler, clamp(displaced, filterClamp.xy, filterClamp.zw));\r\n        maxAlpha = max(maxAlpha, curColor.a);\r\n    }\r\n    float resultAlpha = max(maxAlpha, ownColor.a);\r\n    gl_FragColor = vec4((ownColor.rgb + outlineColor.rgb * (1. - ownColor.a)) * resultAlpha, resultAlpha);\r\n}\r\n",A=function(r){function t(t,e){void 0===t&&(t=1),void 0===e&&(e=0),r.call(this,w,D.replace(/%THICKNESS%/gi,(1/t).toFixed(7))),this.thickness=t,this.uniforms.outlineColor=new Float32Array([0,0,0,1]),this.color=e}r&&(t.__proto__=r),(t.prototype=Object.create(r&&r.prototype)).constructor=t;var e={color:{},thickness:{}};return e.color.get=function(){return PIXI.utils.rgb2hex(this.uniforms.outlineColor)},e.color.set=function(r){PIXI.utils.hex2rgb(r,this.uniforms.outlineColor)},e.thickness.get=function(){return this.uniforms.thickness},e.thickness.set=function(r){this.uniforms.thickness=r},Object.defineProperties(t.prototype,e),t}(PIXI.Filter),X="precision mediump float;\r\n\r\nvarying vec2 vTextureCoord;\r\n\r\nuniform vec2 size;\r\nuniform sampler2D uSampler;\r\n\r\nuniform vec4 filterArea;\r\n\r\nvec2 mapCoord( vec2 coord )\r\n{\r\n    coord *= filterArea.xy;\r\n    coord += filterArea.zw;\r\n\r\n    return coord;\r\n}\r\n\r\nvec2 unmapCoord( vec2 coord )\r\n{\r\n    coord -= filterArea.zw;\r\n    coord /= filterArea.xy;\r\n\r\n    return coord;\r\n}\r\n\r\nvec2 pixelate(vec2 coord, vec2 size)\r\n{\r\n\treturn floor( coord / size ) * size;\r\n}\r\n\r\nvoid main(void)\r\n{\r\n    vec2 coord = mapCoord(vTextureCoord);\r\n\r\n    coord = pixelate(coord, size);\r\n\r\n    coord = unmapCoord(coord);\r\n\r\n    gl_FragColor = texture2D(uSampler, coord);\r\n}\r\n",z=function(r){function e(e){void 0===e&&(e=10),r.call(this,t,X),this.size=e}r&&(e.__proto__=r),(e.prototype=Object.create(r&&r.prototype)).constructor=e;var o={size:{}};return o.size.get=function(){return this.uniforms.size},o.size.set=function(r){"number"==typeof r&&(r=[r,r]),this.uniforms.size=r},Object.defineProperties(e.prototype,o),e}(PIXI.Filter),j="precision mediump float;\r\n\r\nvarying vec2 vTextureCoord;\r\n\r\nuniform sampler2D uSampler;\r\nuniform vec4 filterArea;\r\nuniform vec2 red;\r\nuniform vec2 green;\r\nuniform vec2 blue;\r\n\r\nvoid main(void)\r\n{\r\n   gl_FragColor.r = texture2D(uSampler, vTextureCoord + red/filterArea.xy).r;\r\n   gl_FragColor.g = texture2D(uSampler, vTextureCoord + green/filterArea.xy).g;\r\n   gl_FragColor.b = texture2D(uSampler, vTextureCoord + blue/filterArea.xy).b;\r\n   gl_FragColor.a = texture2D(uSampler, vTextureCoord).a;\r\n}\r\n",O=function(r){function e(e,o,n){void 0===e&&(e=[-10,0]),void 0===o&&(o=[0,10]),void 0===n&&(n=[0,0]),r.call(this,t,j),this.red=e,this.green=o,this.blue=n}r&&(e.__proto__=r),(e.prototype=Object.create(r&&r.prototype)).constructor=e;var o={red:{},green:{},blue:{}};return o.red.get=function(){return this.uniforms.red},o.red.set=function(r){this.uniforms.red=r},o.green.get=function(){return this.uniforms.green},o.green.set=function(r){this.uniforms.green=r},o.blue.get=function(){return this.uniforms.blue},o.blue.set=function(r){this.uniforms.blue=r},Object.defineProperties(e.prototype,o),e}(PIXI.Filter),M="varying vec2 vTextureCoord;\r\n\r\nuniform sampler2D uSampler;\r\n\r\nuniform vec2 center;\r\nuniform vec3 params; // 10.0, 0.8, 0.1\r\nuniform float time;\r\n\r\nvoid main()\r\n{\r\n    vec2 uv = vTextureCoord;\r\n    vec2 texCoord = uv;\r\n\r\n    float dist = distance(uv, center);\r\n\r\n    if ( (dist <= (time + params.z)) && (dist >= (time - params.z)) )\r\n    {\r\n        float diff = (dist - time);\r\n        float powDiff = 1.0 - pow(abs(diff*params.x), params.y);\r\n\r\n        float diffTime = diff  * powDiff;\r\n        vec2 diffUV = normalize(uv - center);\r\n        texCoord = uv + (diffUV * diffTime);\r\n    }\r\n\r\n    gl_FragColor = texture2D(uSampler, texCoord);\r\n}\r\n",B=function(r){function e(e,o,n){void 0===e&&(e=[.5,.5]),void 0===o&&(o=[10,.8,.1]),void 0===n&&(n=0),r.call(this,t,M,{center:{type:"v2",value:{x:.5,y:.5}},params:{type:"v3",value:{x:10,y:.8,z:.1}},time:{type:"1f",value:0}}),this.center=e,this.params=o,this.time=n}r&&(e.__proto__=r),(e.prototype=Object.create(r&&r.prototype)).constructor=e;var o={center:{},params:{},time:{}};return o.center.get=function(){return this.uniforms.center},o.center.set=function(r){this.uniforms.center=r},o.params.get=function(){return this.uniforms.params},o.params.set=function(r){this.uniforms.params=r},o.time.get=function(){return this.uniforms.time},o.time.set=function(r){this.uniforms.time=r},Object.defineProperties(e.prototype,o),e}(PIXI.Filter),Y="precision mediump float;\r\n\r\nvarying vec2 vTextureCoord;\r\nuniform sampler2D uSampler;\r\n\r\nuniform float thickness;\r\nuniform vec4 outlineColor;\r\nuniform float pixelWidth;\r\nuniform float pixelHeight;\r\nvec2 px = vec2(pixelWidth, pixelHeight);\r\n\r\nvoid main(void) {\r\n    const float PI = 3.14159265358979323846264;\r\n    vec4 ownColor = texture2D(uSampler, vTextureCoord);\r\n    vec4 curColor;\r\n    float maxAlpha = 0.;\r\n    for (float angle = 0.; angle < PI * 2.; angle +=  + (1 / thickness).toFixed(7) + ) {\r\n        curColor = texture2D(uSampler, vec2(vTextureCoord.x + thickness * px.x * cos(angle), vTextureCoord.y + thickness * px.y * sin(angle)));\r\n        maxAlpha = max(maxAlpha, curColor.a);\r\n    }\r\n    float resultAlpha = max(maxAlpha, ownColor.a);\r\n    gl_FragColor = vec4((ownColor.rgb + outlineColor.rgb * (1. - ownColor.a)) * resultAlpha, resultAlpha);\r\n}\r\n",k="varying vec4 vColor;\r\nvarying vec2 vTextureCoord;\r\nuniform sampler2D u_texture; //diffuse map\r\nuniform sampler2D u_lightmap;   //light map\r\nuniform vec2 resolution; //resolution of screen\r\nuniform vec4 ambientColor; //ambient RGB, alpha channel is intensity\r\nvoid main() {\r\n    vec4 diffuseColor = texture2D(u_texture, vTextureCoord);\r\n    vec2 lighCoord = (gl_FragCoord.xy / resolution.xy);\r\n    vec4 light = texture2D(u_lightmap, vTextureCoord);\r\n    vec3 ambient = ambientColor.rgb * ambientColor.a;\r\n    vec3 intensity = ambient + light.rgb;\r\n    vec3 finalColor = diffuseColor.rgb * intensity;\r\n    gl_FragColor = vColor * vec4(finalColor, diffuseColor.a);\r\n}\r\n",R=function(r){function t(t,e,o){void 0===o&&(o=[1,1]),r.call(this,Y,k),this.uniforms.u_lightmap=t,this.uniforms.resolution=new Float32Array(o),this.uniforms.ambientColor=new Float32Array(e)}r&&(t.__proto__=r),(t.prototype=Object.create(r&&r.prototype)).constructor=t;var e={texture:{},color:{},resolution:{}};return e.texture.get=function(){return this.uniforms.u_lightmap},e.texture.set=function(r){this.uniforms.u_lightmap=r},e.color.get=function(){return this.uniforms.ambientColor},e.color.set=function(r){this.uniforms.ambientColor=new Float32Array(r)},e.resolution.get=function(){return this.uniforms.resolution},e.resolution.set=function(r){this.uniforms.resolution=new Float32Array(r)},Object.defineProperties(t.prototype,e),t}(PIXI.Filter),V="varying vec2 vTextureCoord;\r\n\r\nuniform sampler2D uSampler;\r\nuniform float blur;\r\nuniform float gradientBlur;\r\nuniform vec2 start;\r\nuniform vec2 end;\r\nuniform vec2 delta;\r\nuniform vec2 texSize;\r\n\r\nfloat random(vec3 scale, float seed)\r\n{\r\n    return fract(sin(dot(gl_FragCoord.xyz + seed, scale)) * 43758.5453 + seed);\r\n}\r\n\r\nvoid main(void)\r\n{\r\n    vec4 color = vec4(0.0);\r\n    float total = 0.0;\r\n\r\n    float offset = random(vec3(12.9898, 78.233, 151.7182), 0.0);\r\n    vec2 normal = normalize(vec2(start.y - end.y, end.x - start.x));\r\n    float radius = smoothstep(0.0, 1.0, abs(dot(vTextureCoord * texSize - start, normal)) / gradientBlur) * blur;\r\n\r\n    for (float t = -30.0; t <= 30.0; t++)\r\n    {\r\n        float percent = (t + offset - 0.5) / 30.0;\r\n        float weight = 1.0 - abs(percent);\r\n        vec4 sample = texture2D(uSampler, vTextureCoord + delta / texSize * percent * radius);\r\n        sample.rgb *= sample.a;\r\n        color += sample * weight;\r\n        total += weight;\r\n    }\r\n\r\n    gl_FragColor = color / total;\r\n    gl_FragColor.rgb /= gl_FragColor.a + 0.00001;\r\n}\r\n",G=function(r){function e(e,o,n,i){void 0===e&&(e=100),void 0===o&&(o=600),void 0===n&&(n=null),void 0===i&&(i=null),r.call(this,t,V),this.uniforms.blur=e,this.uniforms.gradientBlur=o,this.uniforms.start=n||new PIXI.Point(0,window.innerHeight/2),this.uniforms.end=i||new PIXI.Point(600,window.innerHeight/2),this.uniforms.delta=new PIXI.Point(30,30),this.uniforms.texSize=new PIXI.Point(window.innerWidth,window.innerHeight),this.updateDelta()}r&&(e.__proto__=r),(e.prototype=Object.create(r&&r.prototype)).constructor=e;var o={blur:{},gradientBlur:{},start:{},end:{}};return e.prototype.updateDelta=function(){this.uniforms.delta.x=0,this.uniforms.delta.y=0},o.blur.get=function(){return this.uniforms.blur},o.blur.set=function(r){this.uniforms.blur=r},o.gradientBlur.get=function(){return this.uniforms.gradientBlur},o.gradientBlur.set=function(r){this.uniforms.gradientBlur=r},o.start.get=function(){return this.uniforms.start},o.start.set=function(r){this.uniforms.start=r,this.updateDelta()},o.end.get=function(){return this.uniforms.end},o.end.set=function(r){this.uniforms.end=r,this.updateDelta()},Object.defineProperties(e.prototype,o),e}(PIXI.Filter),E=function(r){function t(){r.apply(this,arguments)}return r&&(t.__proto__=r),t.prototype=Object.create(r&&r.prototype),t.prototype.constructor=t,t.prototype.updateDelta=function(){var r=this.uniforms.end.x-this.uniforms.start.x,t=this.uniforms.end.y-this.uniforms.start.y,e=Math.sqrt(r*r+t*t);this.uniforms.delta.x=r/e,this.uniforms.delta.y=t/e},t}(G),H=function(r){function t(){r.apply(this,arguments)}return r&&(t.__proto__=r),t.prototype=Object.create(r&&r.prototype),t.prototype.constructor=t,t.prototype.updateDelta=function(){var r=this.uniforms.end.x-this.uniforms.start.x,t=this.uniforms.end.y-this.uniforms.start.y,e=Math.sqrt(r*r+t*t);this.uniforms.delta.x=-t/e,this.uniforms.delta.y=r/e},t}(G),L=function(r){function t(t,e,o,n){void 0===t&&(t=100),void 0===e&&(e=600),void 0===o&&(o=null),void 0===n&&(n=null),r.call(this),this.tiltShiftXFilter=new E(t,e,o,n),this.tiltShiftYFilter=new H(t,e,o,n)}r&&(t.__proto__=r),(t.prototype=Object.create(r&&r.prototype)).constructor=t;var e={blur:{},gradientBlur:{},start:{},end:{}};return t.prototype.apply=function(r,t,e){var o=r.getRenderTarget(!0);this.tiltShiftXFilter.apply(r,t,o),this.tiltShiftYFilter.apply(r,o,e),r.returnRenderTarget(o)},e.blur.get=function(){return this.tiltShiftXFilter.blur},e.blur.set=function(r){this.tiltShiftXFilter.blur=this.tiltShiftYFilter.blur=r},e.gradientBlur.get=function(){return this.tiltShiftXFilter.gradientBlur},e.gradientBlur.set=function(r){this.tiltShiftXFilter.gradientBlur=this.tiltShiftYFilter.gradientBlur=r},e.start.get=function(){return this.tiltShiftXFilter.start},e.start.set=function(r){this.tiltShiftXFilter.start=this.tiltShiftYFilter.start=r},e.end.get=function(){return this.tiltShiftXFilter.end},e.end.set=function(r){this.tiltShiftXFilter.end=this.tiltShiftYFilter.end=r},Object.defineProperties(t.prototype,e),t}(PIXI.Filter),N="varying vec2 vTextureCoord;\r\n\r\nuniform sampler2D uSampler;\r\nuniform float radius;\r\nuniform float angle;\r\nuniform vec2 offset;\r\nuniform vec4 filterArea;\r\n\r\nvec2 mapCoord( vec2 coord )\r\n{\r\n    coord *= filterArea.xy;\r\n    coord += filterArea.zw;\r\n\r\n    return coord;\r\n}\r\n\r\nvec2 unmapCoord( vec2 coord )\r\n{\r\n    coord -= filterArea.zw;\r\n    coord /= filterArea.xy;\r\n\r\n    return coord;\r\n}\r\n\r\nvec2 twist(vec2 coord)\r\n{\r\n    coord -= offset;\r\n\r\n    float dist = length(coord);\r\n\r\n    if (dist < radius)\r\n    {\r\n        float ratioDist = (radius - dist) / radius;\r\n        float angleMod = ratioDist * ratioDist * angle;\r\n        float s = sin(angleMod);\r\n        float c = cos(angleMod);\r\n        coord = vec2(coord.x * c - coord.y * s, coord.x * s + coord.y * c);\r\n    }\r\n\r\n    coord += offset;\r\n\r\n    return coord;\r\n}\r\n\r\nvoid main(void)\r\n{\r\n\r\n    vec2 coord = mapCoord(vTextureCoord);\r\n\r\n    coord = twist(coord);\r\n\r\n    coord = unmapCoord(coord);\r\n\r\n    gl_FragColor = texture2D(uSampler, coord );\r\n\r\n}\r\n",U=function(r){function e(e,o,n){void 0===e&&(e=200),void 0===o&&(o=4),void 0===n&&(n=20),r.call(this,t,N),this.radius=e,this.angle=o,this.padding=n}r&&(e.__proto__=r),(e.prototype=Object.create(r&&r.prototype)).constructor=e;var o={offset:{},radius:{},angle:{}};return o.offset.get=function(){return this.uniforms.offset},o.offset.set=function(r){this.uniforms.offset=r},o.radius.get=function(){return this.uniforms.radius},o.radius.set=function(r){this.uniforms.radius=r},o.angle.get=function(){return this.uniforms.angle},o.angle.set=function(r){this.uniforms.angle=r},Object.defineProperties(e.prototype,o),e}(PIXI.Filter);r.AsciiFilter=o,r.BloomFilter=u,r.BulgePinchFilter=f,r.ColorReplaceFilter=m,r.ConvolutionFilter=h,r.CrossHatchFilter=x,r.DotFilter=y,r.DropShadowFilter=_,r.EmbossFilter=S,r.GlowFilter=P,r.OutlineFilter=A,r.PixelateFilter=z,r.RGBSplitFilter=O,r.ShockwaveFilter=B,r.SimpleLightmapFilter=R,r.TiltShiftFilter=L,r.TiltShiftAxisFilter=G,r.TiltShiftXFilter=E,r.TiltShiftYFilter=H,r.TwistFilter=U,Object.defineProperty(r,"__esModule",{value:!0}),Object.assign(PIXI.filters,__pixiFilters)});
//# sourceMappingURL=filters.min.js.map
